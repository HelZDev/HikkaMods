from .. import loader, utils
import re
import asyncio

class BonusBotMod(loader.Module):
    """Автоматическое получение бонусов в Telegram-боте"""
    strings = {"name": "BonusBot"}
    
    def __init__(self):
        self.running = False
        self.bot_username = "@gram_farm_bot"
    
    async def client_ready(self, client, db):
        self.client = client
    
    async def gfcmd(self, message):
        """Запускает автоматический процесс сбора бонусов"""
        if self.running:
            await utils.answer(message, "✅ Бот уже работает!")
            return
        self.running = True
        await utils.answer(message, "✅ Авто-сбор бонусов запущен!")
        while self.running:
            await self.collect_bonus()
            await asyncio.sleep(86400)  # Запуск раз в х времени
    
    async def gscmd(self, message):
        """Останавливает автоматический процесс сбора бонусов"""
        self.running = False
        await utils.answer(message, "🛑 Авто-сбор бонусов остановлен!")
    
    async def bonuscmd(self, message):
        """Запускает процесс получения бонуса вручную"""
        await self.client.send_message(self.bot_username, "🎁 Бонус")
    
    async def watcher(self, message):
        if not message.sender_id:
            return
        
        if message.chat_id != (await self.client.get_entity(self.bot_username)).id:
            return
        
        # Проверка на капчу (поиск примера)
        match = re.search(r"(\d+) \+ (\d+) =", message.text)
        if match:
            num1, num2 = map(int, match.groups())
            answer = num1 + num2
            await message.respond(str(answer))
            return
        
        # Поиск кнопки "Получить бонус"
        messages = await self.client.get_messages(self.bot_username, limit=1)
        if messages and messages[0].reply_markup:
            await messages[0].click(0)
            await asyncio.sleep(3)
    
    async def collect_bonus(self):
        await self.client.send_message(self.bot_username, "🎁 Бонус")
        await asyncio.sleep(5)
        
        async for message in self.client.iter_messages(self.bot_username, limit=5):
            if "?" in message.text:
                answer = self.solve_captcha(message.text)
                if answer:
                    await message.reply(answer)
                    break
        
        await asyncio.sleep(5)
        
        messages = await self.client.get_messages(self.bot_username, limit=1)
        if messages and messages[0].reply_markup:
            await messages[0].click(0)
            await asyncio.sleep(3)
    
    def solve_captcha(self, text: str) -> str:
        match = re.search(r"(\d+) \+ (\d+)", text)
        return str(int(match.group(1)) + int(match.group(2))) if match else ""
