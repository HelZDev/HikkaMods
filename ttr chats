# meta developer: –í–∞—à–ù–∏–∫
from .. import loader, utils
import asyncio

@loader.tds
class ChatBroadcasterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã –∏ –õ–°"""
    strings = {"name": "ChatBroadcaster"}

    async def ttrcmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã/–õ–°: .ttr <chat_id,user_id> <text> [time] [quantity]"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not args:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã –∏ —Ç–µ–∫—Å—Ç.")
            return

        parts = args.split(" ", 1)

        if len(parts) < 2 and not reply:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        chats_raw = parts[0].split(",")  # –†–∞–∑–¥–µ–ª—è–µ–º –∞–π–¥–∏ —á–∞—Ç–æ–≤/—é–∑–µ—Ä–æ–≤
        chats = []
        
        for chat in chats_raw:
            try:
                chats.append(int(chat))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            except ValueError:
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞: '{chat}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID.")
                return

        text_and_options = parts[1] if len(parts) > 1 else ""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        time, quantity = 0, 1
        text_parts = text_and_options.rsplit(" ", 2)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞, —Ç.–∫. –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ

        if len(text_parts) > 2:
            text = text_parts[0]
            try:
                time = int(text_parts[1])
                quantity = int(text_parts[2])
            except ValueError:
                await message.edit("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏/–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
                return
        else:
            text = text_and_options

        if not text and not reply:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for _ in range(quantity):
            for chat in chats:
                try:
                    if reply:
                        if reply.photo or reply.document:
                            await message.client.send_file(chat, reply)
                        else:
                            await message.client.send_message(chat, reply.text)
                    else:
                        await message.client.send_message(chat, text)
                except Exception as e:
                    await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat}: {str(e)}")
            if time > 0:
                await asyncio.sleep(time)

        await message.edit("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def ttidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: .ttid"""
        dialogs = await message.client.get_dialogs()
        chat_list = [f"{chat.id} - {chat.title}" for chat in dialogs if chat.is_group or chat.is_channel]
        
        if not chat_list:
            await message.edit("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return

        chat_text = "\n".join(chat_list)
        await utils.answer(message, f"üìú **–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:**\n\n{chat_text}")

    async def ttuidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –õ–°: .ttuid"""
        dialogs = await message.client.get_dialogs()
        user_list = [f"{user.id} - {user.name}" for user in dialogs if user.is_user]

        if not user_list:
            await message.edit("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        user_text = "\n".join(user_list)
        await utils.answer(message, f"üìú **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n{user_text}")
