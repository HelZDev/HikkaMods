# meta developer: @Its_HelZ
from .. import loader, utils
import asyncio

@loader.tds
class ChatBroadcasterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã –∏ –õ–°"""
    strings = {"name": "ChatBroadcaster"}

    async def ttrcmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã/–õ–°: .ttr <chat_id,user_id> <text> [time] [quantity]"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not args:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã –∏ —Ç–µ–∫—Å—Ç.")
            return

        parts = args.split(" ", 2)

        if len(parts) < 2:
            await message.edit("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return

        targets = parts[0].split(",")  # –†–∞–∑–¥–µ–ª—è–µ–º –∞–π–¥–∏ —á–∞—Ç–æ–≤/—é–∑–µ—Ä–æ–≤
        text = parts[1]  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        delay = int(parts[2]) if len(parts) > 2 else 0  # –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏
        quantity = int(parts[3]) if len(parts) > 3 else 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫

        for _ in range(quantity):
            for target in targets:
                try:
                    if reply:
                        await message.client.send_file(int(target), reply)
                    else:
                        await message.client.send_message(int(target), text)
                except Exception as e:
                    await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {str(e)}")
            if delay > 0:
                await asyncio.sleep(delay)

        await message.edit("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def ttidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: .ttid"""
        dialogs = await message.client.get_dialogs()
        chat_list = [f"{chat.id} - {chat.title}" for chat in dialogs if chat.is_group or chat.is_channel]
        
        if not chat_list:
            await message.edit("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return

        chat_text = "\n".join(chat_list)
        await utils.answer(message, f"üìú **–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:**\n\n{chat_text}")

    async def ttuidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –õ–°: .ttuid"""
        dialogs = await message.client.get_dialogs()
        user_list = [f"{user.id} - {user.name}" for user in dialogs if user.is_user]

        if not user_list:
            await message.edit("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        user_text = "\n".join(user_list)
        await utils.answer(message, f"üìú **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n{user_text}")
